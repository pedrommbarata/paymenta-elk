# Parse the incoming HTTP, to ensure it is enconded as JSON
filter {
	if !("split_events" in [tags]) {
		json {
			source => "message"
			remove_field => ["message"]
		}
    }
}
filter{
	#Serilog HTTP sink can send multiple events
	#Split events, so Elasticsearch receives one event at a time
	split { 
		field => "events"
		target=> "paymenta_event"
		add_tag => ["events_split"]
		remove_field => ["events"]
	}

	#json {
	#	source => "[paymenta_event][Properties][details]"
	#	target => "[paymenta_event][Properties][details]"
	#}

	mutate{
		add_field => ["PaymentaLogLevel", "%{[paymenta_event][Level]}"]
		add_field => ["lc_index_identifier", "%{[paymenta_event][Level]}"]
	}

	if [paymenta_event][Properties][RequestId] =~ /.+/  {
		mutate{
			add_field => ["RequestID","%{[paymenta_event][Properties][RequestId]}"]
		}
	}
	else{
		mutate{
			add_field => ["RequestID","N/A"]
		}
	}
	
	mutate {
		lowercase => [ "lc_index_identifier" ]
	}

	#if [paymenta_event][Properties][RequestBody] =~ /.+/  {
	#	json {
	#		source => "[paymenta_event][Properties][RequestBody]"
	#		target => "[paymenta_event][Properties][RequestBody]"
	#	}
	#}
	
	#if [paymenta_event][Properties][ResponseBody] =~ /.+/  {
	#	json {
	#		source => "[paymenta_event][Properties][ResponseBody]"
	#		target => "[paymenta_event][Properties][ResponseBody]"
	#	}
	#}
	
	# if [paymenta_event][Properties][ResponseBody] == "" {
	# 	mutate {
	# 		remove_field => ["[paymenta_event][Properties][ResponseBody]"]
	# 		add_tag => ["ResponseBody removed"]
	# 	}
	# }

	mutate {
        add_field => { "token" => "rKeoHvdGMHIpkrtorOOPzjpXhWkHHYud" }
    }

	aggregate {
		task_id => "%{[RequestID]}"
		code => "
			require 'json'

			map['event_count'] ||= 0; map['event_count'] += 1;
			
			map['lc_index_identifier'] = event.get('lc_index_identifier');
			map['token'] = event.get('token');
			map['type'] = event.get('type');
		
			map['events_debug'] ||= []
         	map['events_debug'] << {'paymenta_event' => event.get('paymenta_event')};

			map['event_timeline'] ||= [];
         	map['event_timeline'] << {'timestamp'=> event.get('[paymenta_event][Timestamp]'),
				 				'loglevel' => event.get('[PaymentaLogLevel]'),
			 					'message_template' => event.get('[paymenta_event][MessageTemplate]'),
			 					'message_properties' => event.get('[paymenta_event][Properties]'),
			 					};
			
			map['has_error']|=false;
			if(event.get('[PaymentaLogLevel]')=='Error')
				map['has_error']=true;
			end

			map['has_warning']|=false;
			if(event.get('[PaymentaLogLevel]')=='Warning')
				map['has_warning']=true;
			end

			map['status_code']=0;
			if(event.get('[paymenta_event][Properties][StatusCode]'))
				map['status_code']=event.get('[paymenta_event][Properties][StatusCode]');
			end

         	event.cancel();
			"
		push_map_as_event_on_timeout => true
		timeout_task_id_field => "RequestID"
   		timeout => 15
   		inactivity_timeout => 10 
		timeout_tags => ['_aggregatetimeout']
		timeout_code => "event.set('several_events', event.get('event_count') > 1)"
		add_tag => ["events_aggregate"]
	}
}